---
import Layout from '../components/Layout.astro';
import CardComponent from '../components/CardComponent.astro';
import ProductSnippet from '../components/ProductSnippet.astro';
import CounterComponent from '../components/react/CounterComponent.jsx';
import { products, clients, events } from '../data/pages.json';
import DottedPathSVG from '../components/DottedPathSVG.astro';
import { getLatestPost } from '@/lib/wpFunctions';
import Carousel from '../components/Carousel.astro';
import { home } from '../data/pages.json';
import type { PostItem } from '../types';
import { exportAllPostsAsJson } from '@/lib/wpFunctions';
import ParticlesBackground from '../components/ParticlesBackground.astro';

const metadata = home.pages[0].metadata;

if (!clients) {
  throw new Error('Client info not found');
}

// Get the current date
const currentDate = new Date();

// Helper function to parse dates
const parseDate = (dateString: string) => new Date(dateString);

// Filter and sort the events to find the closest future event
const futureEvents = events
  .map(event => ({ ...event, date: parseDate(event.eventDate) }))
  .filter(event => event.date > currentDate)
  .sort((a, b) => a.date.getTime() - b.date.getTime());

const closestEvent = futureEvents[0];
const latestBlogPost = await getLatestPost("Blog");

type Author = {
  node: {
    name: string;
  };
};

// Helper function to ensure author is always an array
function ensureAuthorArray(author: Author | Author[]): Author[] {
  return Array.isArray(author) ? author : [author];
}


// Define types for our content
type EventContent = {
  type: 'event';
  title: string;
  date: Date;
};

type BlogPostContent = {
  type: 'blogPost';
  title: string;
  author: string | string[] | Author[];
  slug: string;
};

type DefaultContent = {
  type: 'default';
  title: string;
  date: Date;
};

type DisplayContent = EventContent | BlogPostContent | DefaultContent;

// Determine what content to display
let contentToDisplay: DisplayContent;

if (closestEvent) {
  contentToDisplay = {
    type: 'event',
    title: closestEvent.title,
    date: closestEvent.date
  };
} else if (latestBlogPost) {
  contentToDisplay = {
    type: 'blogPost',
    title: latestBlogPost.title,
    author: ensureAuthorArray(latestBlogPost.author),
    slug: latestBlogPost.slug
  };
} else {
  contentToDisplay = {
    type: 'default',
    title: "No Upcoming Events",
    date: new Date()
  };
}
//exportAllPostsAsJson(); 
---

<Layout homeBackground='true' gradient="true" backgroundColorScript="true" navWidth={70} metadata={metadata} phone="1 (844) 476-9757">
  <ParticlesBackground />
  <div class="mb:hidden">
    <DottedPathSVG
      uniqueId='line-2'
      targetDivClass="main-content"
      strokeWidth={4}
      strokeDasharray="5,5"
      circleRadius={10}
      animationDuration={10}
      glowDistance={2.5}
      initialYOffset={20}
      startY={725}
      strokeColor="white"
      circleColor="white"
      glowColor={null}
      targetDivXPosition="center"
      targetDivYPosition="center"
      flipped={true}
      semiRect={true}
      height={775}
      loopReverse={true}
      />
  </div>
  <div class="layoutConstraint main-content justify-center relative z-10">
    <div class="leading-snug text-left text-wrap text-blue min-w-[305px]">
      <h1 class="text-[calc(4vw+2rem)]  break-words w-full font-medium mt-16 mb:mt-8">
        OneTier Data Secure Platform
      </h1>
      
      <button class="gradient-button request-demo-button text-2xl px-8 py-3 mt-8">
          More Information
      </button>
    </div>
    <div id="cards" class="flex gap-8 justify-end my-16 mb:hidden">
      {contentToDisplay.type === 'event' && (
        <CardComponent
          title={contentToDisplay.title}
          subtitle={contentToDisplay.date.toDateString()}
          glassmorphism="true"
          route="/events"
        />
      )}
      {contentToDisplay.type === 'blogPost' && (
        <CardComponent
          title={contentToDisplay.title}
          subtitle={`Blog Post`}
          glassmorphism="true"
          route={`/blog/${contentToDisplay.slug}`}
        />
      )}
      {contentToDisplay.type === 'default' && (
        <CardComponent
          title={contentToDisplay.title}
          subtitle={contentToDisplay.date.toDateString()}
          glassmorphism="true"
          route="/events"
        />
      )}
      <CardComponent
        title="Risk Engagement"
        subtitle="Product Highlight"
        glassmorphism="true"
        route="/risk-engagement"
      />
    </div>
    <div class="flex flex-col items-center justify-center min-h-[40vw] mt-16 text-white py-4">
      <div class="pane backdrop-filter backdrop-blur-lg rounded-3xl text-center mb-12 space-y-[8px] w-full p-8 mb:p-3 mb:w-full ">
        <p class="text-[calc(16px+1vw)]">
          Data breaches are slated to cost your organization
        </p>
        <CounterComponent 
          targetNumber={10500000000} 
          duration={3000} 
          emphasize={true} 
          client:visible 
        />
        <p class="text-[calc(16px+1vw)]">
          by 2025
        </p>
      </div>
      <div class="z-10 pane backdrop-filter backdrop-blur-lg rounded-3xl p-8 text-center w-full mb-12 mb:w-full mb:p-4">
        <h2 class="text-[calc(12px+4vw)] font-bold text-white">
          From Zero to Trust
        </h2>
        <p class="text-3xl mb-0">
          Here's how we keep you safe.
        </p>
      </div>
    </div>
    <div class="flex flex-col gap-8 dt:gap-16 mb:w-full items-center">
      {products.pages.map((product: any, index: number) => (
        <ProductSnippet
          key={product.href}
          iconSrc={product.iconSrc}
          productName={product.label}
          title={product.title}
          subtitle={product.subtitle}
          url={product.href}
          justify={index % 2 === 0 ? 'left' : 'right'}
          firstSnippet={index === 0}
          containerClass={index === 0 ? '' : ''}
        />
      ))}
    </div>
    <div class="mt-16 relative w-screen left-1/2 right-1/2 -mx-[50vw]">
      <div class="bg-white">
        <section class="bg-white w-full py-8 mb:py-4">
          <div class="w-full max-w-screen-lg mx-auto px-4 flex flex-col items-center">
            <p class="text-center text-5xl mb:text-3xl text-blue font-bold mb-8 mb:mb-4">Our Clients</p>
            <div class="logo-container w-full">
              <Carousel clients={clients} scale={1.5} speed={100} scroll={true} pauseOnHover={true} sideBlur={true}/>
            </div>
            <button class="gradient-button request-demo-button text-base md:text-lg dt:text-xl py-3 px-6 my-8 max-w-[250px] h-[50px] w-[calc(60vw+200px)]">
              Request Demo
          </button>
            </section>
      </div>
    </div>
    <div class="flex items-center justify-center my-16 mb:my-[2vh] mb:space-x-8">
      <!-- glassmorphic background with padding -->
      <div class="grid grid-cols-1 dt:grid-cols-2 gap-8 dt:gap-16 items-center justify-items-center dt:glassmorphic-bg bg-opacity-20 backdrop-filter backdrop-blur-lg rounded-lg w-full max-w-[calc(60vw+200px)] p-8">
        <div class="flex flex-col items-center justify-between w-full max-w-[350px] h-full">
          <p class="text-white text-lg md:text-xl dt:text-2xl mb-4 text-center">Learn about the OneTier Partner Program</p>
          <a href="/" class="bg-white text-blue font-bold py-3 px-6 rounded-full hover:bg-cold-white w-full max-w-[250px] h-[50px] flex items-center justify-center text-base md:text-lg dt:text-xl">Partners</a>
        </div>
        <div class="flex flex-col items-center justify-between w-full max-w-[350px] h-full">
          <p class="text-white text-lg md:text-xl dt:text-2xl mb-4 text-center">Join our Newsletter on LinkedIn</p>
          <a href="/" class="bg-white text-blue font-bold py-3 px-6 rounded-full hover:bg-cold-white w-full max-w-[250px] h-[50px] flex items-center justify-center text-base md:text-lg dt:text-xl">Subscribe</a>
        </div>
      </div>
    </div>
  </div>
</Layout>

<style>
:root {
    --filter-half-blue: rgba(16, 121, 208, .3); /* Semi-transparent blue */
}

html, body {
  overflow-x: hidden;
}

.glassmorphic-bg {
    background: rgba(255, 255, 255, 0.2);
    box-shadow: 0 4px 30px rgba(0, 0, 0, 0.1);
    backdrop-filter: blur(10px);
    -webkit-backdrop-filter: blur(10px);
    border-radius: 10px;
    border: 1px solid rgba(255, 255, 255, 0.3);
  }

.pane {
    background-color: var(--filter-half-blue);
    backdrop-filter: 'blur(10px)';
}

h1{
  color: var(--color-blue);
  position: relative;
  z-index: 1;
}

/* Ensure all content is above particles */
.main-content {
    position: relative;
    z-index: 1;
}
</style>
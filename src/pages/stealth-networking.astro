---
import Layout from '../components/Layout.astro';
import Features from '../components/Features.astro';
import Lines from '../components/StaticLinesProducts.astro';
import DottedPathSVG from '../components/DottedPathSVG.astro';
import type { ProductInfo } from '../types';
import pages from '../data/pages.json';
// Change this line for each product
const productInfo: ProductInfo = pages.products.find(p => p.href === '/stealth-networking') || pages.products[4];

if (!productInfo) {
  throw new Error('Product info not found');
}

const pageContent = productInfo.pageContent;
if (!pageContent) {
  throw new Error('Page content not found');
}

const features = pageContent.features;

const buttons = [
  { text: 'Benefits', href: '#benefits' },
  { text: 'Features', href: '#features' },
  { text: 'Visual Guide', href: '#visual-guide' }];

const customYOffset = 100; // Set your desired offset here
const gradient = false;
---
<Layout headerLogoColor='white' headerIconColor='white' gradient={gradient}>
  <div class="initial-div relative text-white p-8">
    <div class="mb:hidden">
    <DottedPathSVG
      uniqueId="line-1"
      targetDivClass="button-container"
      strokeWidth={4}
      strokeDasharray="5,5"
      circleRadius={10}
      animationDuration={10}
      glowDistance={2.5}
      initialYOffset={customYOffset}
      startY={65}
      strokeColor="white"
      circleColor="white"
      glowColor={null}
      targetDivXPosition="right"
      targetDivYPosition="center"
      semiRect={false}
    />
    <DottedPathSVG
      uniqueId='line-2'
      targetDivClass="main-content"
      strokeWidth={4}
      strokeDasharray="5,5"
      circleRadius={10}
      animationDuration={10}
      glowDistance={2.5}
      initialYOffset={20}
      startY={65}
      strokeColor="white"
      circleColor="white"
      glowColor={null}
      targetDivXPosition="center"
      targetDivYPosition="center"
      flipped={true}
      semiRect={true}
      height={675}
      loopReverse={true}
      />
    </div>
    <div class="dt:hidden">
      <DottedPathSVG
        uniqueId="line-3"
        targetDivClass="initial-div"
        strokeWidth={4}
        strokeDasharray="5,5"
        circleRadius={10}
        animationDuration={10}
        glowDistance={2.5}
        initialYOffset={15}
        startY={65}
        strokeColor="white"
        circleColor="white"
        glowColor={null}
        targetDivXPosition="right"
        targetDivYPosition="top"
        semiRect={false}
        simpleHorizontal={true}
        loopReverse={true}
      />
    </div>
    <div class="main-content justify-center dt:w-[75%] dt:ml-[12.5%] w-[90%] ml-[5%] mt-4">
      <div class="flex justify-between items-start">
        <div class="logo flex mb:flex-col-reverse">
          <div class="relative content w-2/3 mb:w-full">
              <p class="text-6xl font-bold mb-4 drop-shadow-lg mb:text-center">
                {productInfo.label}
              </p>
              <p class="text-3xl mb-8 mb:text-center">
                {pageContent.subtitle}
              </p>
            </div>
            <img src={productInfo.iconSrc} alt={productInfo.iconAlt} class="productIcon w-1/3 filter-white mb:w-[50%] mb:mb-9 mb:place-self-center">
            </img>
          </div>
        </div>
        <div class="button-container relative w-full mt-10">
          
          <div class="buttons flex flex-row justify-center space-x-[5%]">
            {buttons.map((button, index) => (
              <a
                href={button.href}
                class="gradient-button button-gradient text-white py-2 hover:text-white transition-colors w-[30%] h-12 text-center font-bold rounded-2xl"
                id={`nav-${button.href.substring(1)}`}
              >
                {button.text}
              </a>
            ))}
          </div>
        </div>
        <div class="mt-16 mb-16 flex flex-row space-x-10 mb:space-x-0 mb:flex-col-reverse">
          <div class="pt-4">
            <img src="/risk_mockup.png" alt="Risk Engagement Mockup" class="w-full" />
          </div>
          <div id="benefits" class="w-full">
            <p class="text-5xl mb-8 font-semibold mb:text-center">
              Benefits
            </p>
            <div class="right-20">
              <p class="text-xl mb:text-center">
                {pageContent.benefits?.subtitle || "At OneTier, we offer data aggregation for your business environments, so you can see exactly what is happening, and where it is happening."}
              </p>
            </div>
          </div>
        </div>
        <Features features={features} />
        <div class="mt-16 mb-16 flex flex-row min-h-[250px] mb:min-h-[55vw] space-x-8 mb:space-x-0 mb:flex-col">
          <div id="visual-guide" class="flex flex-col dt:max-w-[40%] mb:mb-4">
          <p class="text-5xl mb-8 font-semibold mb:text-center">
            Visual Guide
          </p>
          <p class="mb:text-center text-md">
            {pageContent['visual-guide']?.subtitle || "At OneTier, we offer data aggregation for your business environments, to you can see exactly what is happening, and where it is happening."}
          </p>
        </div>
        <div class="video-container flex-1 flex items-center justify-center mb:h-[55vw]">
          <!-- Ensure the iframe maintains the aspect ratio -->
          <div class="relative w-full" style="padding-bottom: 56.25%;"> <!-- 16:9 aspect ratio -->
            <iframe class="absolute top-0 left-0 w-full h-full border-4 border-dashed" 
              src={pageContent['visual-guide']?.graphicSrc || "https://www.youtube.com/embed/dQw4w9WgXcQ"} 
              allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" 
              allowfullscreen>
            </iframe>
          </div>
        </div>
          </div>
        </div>
      </div>
    </div>
</div>
</Layout>

<style>
  .button-gradient {
    background: linear-gradient(0deg, var(--orange), var(--dark-orange));
    cursor: pointer;
    
  }
  .button-gradient:hover, .button-gradient:focus {
	background: radial-gradient(circle at var(--x, 50%) var(--y, 50%), #FF8500, #FF5700);
}

</style>
<script>
  document.addEventListener('DOMContentLoaded', () => {
    const internalLinks = document.querySelectorAll<HTMLAnchorElement>('a[href^="#"]');
    
    internalLinks.forEach(link => {
      link.addEventListener('click', (e: Event) => {
        e.preventDefault();
        
        const href = link.getAttribute('href');
        if (href) {
          const targetId = href.substring(1);
          const targetElement = document.getElementById(targetId);
          
          if (targetElement) {
            targetElement.scrollIntoView({
              behavior: 'smooth',
              block: 'start'
            });
          }
        }
      });
    });
  });
</script>
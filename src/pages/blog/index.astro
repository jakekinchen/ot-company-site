---
import BaseHead from '../../components/BaseHead.astro';
import Header from '../../components/Header.astro';
import Footer from '../../components/Footer.astro';
import Layout from '../../components/Layout.astro';
import { SITE_TITLE, SITE_DESCRIPTION } from '../../consts';
import FormattedDate from '../../components/FormattedDate.astro';
import type { PostNode } from '../../lib/wpFunctions';
import { getRecentPosts, getLatestPost } from '../../lib/wpFunctions';

// Fetch both blog and news posts
const allBlogPosts = await getRecentPosts("Blog");
const allNewsPosts = await getRecentPosts("News");
const latestBlogPost = await getLatestPost("Blog");
const latestNewsPost = await getLatestPost("News");

const metadata = {
  title: SITE_TITLE,
  description: SITE_DESCRIPTION,
};
const gradient = true;

// Initial number of posts to show
const initialPostCount = 5;

// Combine all posts for initial rendering
const allPosts = [...allBlogPosts, ...allNewsPosts].sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());
---

<Layout headerLogoColor='blue' headerIconColor='blue' headerBackground='bg-white' gradient={true}>
  <div class="layoutConstraint text-dark-blue">
    <section class="bg-white py-16 text-center flex flex-col items-center">
      <h1 class="text-4xl font-bold text-center">Stay Ahead of the Curve in Cybersecurity</h1>
      <p class="text-center text-lg mt-4">Get the latest news, insights, and updates from our team of experts.</p>
      {latestBlogPost && (
        <a href={`/blog/${latestBlogPost.slug}/`} class="bg-dark-blue hover:bg-white hover:border-4 hover:text-dark-blue text-white rounded-3xl py-2 px-4 hover:px-3 hover:py-1 cursor-pointer mt-4">
          Read the latest blog article
        </a>
      )}
      {latestNewsPost && (
        <a href={`/news/${latestNewsPost.slug}/`} class="bg-dark-blue hover:bg-white hover:border-4 hover:text-dark-blue text-white rounded-3xl py-2 px-4 hover:px-3 hover:py-1 cursor-pointer mt-4">
          Read the latest news article
        </a>
      )}
    </section>
    <section class="w-full flex flex-col">
      <div class="filter-buttons-container flex mb-8 ml-3">
        <div class="filter-buttons flex flex-wrap">
          <button class="filter-btn bg-blue text-white hover:text-white px-4 py-2 rounded-full mr-2 mb-2 active" data-type="All">All</button>
          <button class="filter-btn bg-white text-blue hover:text-white px-4 py-2 rounded-full mr-2 mb-2" data-type="Blog">Blog</button>
          <button class="filter-btn bg-white text-blue hover:text-white px-4 py-2 rounded-full mr-2 mb-2" data-type="News">News</button>
        </div>
      </div>
      <div class="threeQuarters p-4">
        <h2 class="pb-4 text-blue text-3xl font-bold">Articles</h2>
        <ul id="postList">
          {allPosts.slice(0, initialPostCount).map((post: PostNode) => (
            <li class="min-h-[400px] pt-6 pb-2" data-type={post.categories.nodes[0].name}>
              <article class="blog-post-preview flex flex-col border-b border-gray-200">
                <header>
                  <h2 class="text-2xl font-semibold mb-2">
                    <a href={`/${post.categories.nodes[0].name.toLowerCase()}/${post.slug}/`} class="text-blue-900 hover:text-blue-700">
                      {post.title}
                    </a>
                  </h2>
                  {post.author?.node && (
                    <p class="text-gray-600 mb-1">by {post.author.node.name}</p>
                  )}
                  <time class="text-gray-500 block">
                    <FormattedDate date={new Date(post.date)} />
                  </time>
                </header>
                <p class="text-gray-700 mb-4" set:html={post.excerpt.length > 250 ? post.excerpt.slice(0, 250) + '...' : post.excerpt}></p>
                <a href={`/${post.categories.nodes[0].name.toLowerCase()}/${post.slug}/`} class="inline-block bg-blue-900 text-white px-6 py-2 rounded-md hover:bg-blue-800 transition-colors mt-auto">
                  Read more
                </a>
              </article>
            </li>
          ))}
        </ul>
        {allPosts.length > initialPostCount && (
          <button id="loadMore" class="mt-4 bg-dark-blue text-white rounded-3xl px-4 py-2">Load More</button>
        )}
      </div>
    </section>
  </div>
</Layout>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const filterButtons = document.querySelectorAll('.filter-btn');
    const postItems = document.querySelectorAll('#postList li');
    const loadMoreButton = document.getElementById('loadMore');
    let currentFilter: string | null = 'All';
    let visiblePosts = 5;

    filterButtons.forEach(button => {
      button.addEventListener('click', () => {
        const filterType = button.getAttribute('data-type');
        currentFilter = filterType;
        visiblePosts = 5;

        // Toggle active class for buttons
        filterButtons.forEach(btn => btn.classList.remove('active'));
        button.classList.add('active');

        // Filter posts
        postItems.forEach((item, index) => {
          if (item instanceof HTMLElement) {
            const postType = item.getAttribute('data-type');
            if (filterType === 'All' || postType === filterType) {
              item.style.display = index < visiblePosts ? 'block' : 'none';
            } else {
              item.style.display = 'none';
            }
          }
        });

        // Show/hide load more button
        updateLoadMoreButton();
      });
    });

    if (loadMoreButton) {
      loadMoreButton.addEventListener('click', () => {
        visiblePosts += 5;
        postItems.forEach((item, index) => {
          if (item instanceof HTMLElement) {
            const postType = item.getAttribute('data-type');
            if (currentFilter === 'All' || postType === currentFilter) {
              item.style.display = index < visiblePosts ? 'block' : 'none';
            }
          }
        });
        updateLoadMoreButton();
      });
    }

    function updateLoadMoreButton() {
      const visibleCount = Array.from(postItems).filter(item => {
        if (item instanceof HTMLElement) {
          const postType = item.getAttribute('data-type');
          return (currentFilter === 'All' || postType === currentFilter) && item.style.display !== 'none';
        }
        return false;
      }).length;

      if (loadMoreButton) {
        loadMoreButton.style.display = visibleCount < postItems.length ? 'block' : 'none';
      }
    }
  });
</script>

<style>
  .filter-buttons button {
    transition: background-color 0.3s ease, color 0.3s ease;
  }
  .filter-buttons button:hover {
    background-color: var(--light-blue);
    color: var(--white);
  }
  .filter-btn.active {
    background-color: var(--blue);
    color: var(--white);
  }
  .filter-btn:not(.active) {
    background-color: var(--white);
    color: var(--blue);
    border: 1px solid var(--blue);
  }
</style>
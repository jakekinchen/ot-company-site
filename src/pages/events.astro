---
import Layout from '../components/Layout.astro';
import { getCollection } from 'astro:content';
import type { Event } from '../types';
import { events } from '../data/pages.json';

// Filter out past events
const currentDate = new Date();
const futureEvents = events.filter((event) => new Date(event.eventDate) >= currentDate);

// Sort the remaining events
const sortedEvents = futureEvents.sort((a: any, b: any) => new Date(a.eventDate).getTime() - new Date(b.eventDate).getTime());

const eventTypes = ['All', 'Webinar', 'Out and About', 'Conference', 'Exposition'] as const;
---

<Layout headerLogoColor='blue' headerIconColor='blue' headerBackground='bg-white' gradient={true}>
  <section class="bg-white py-16 text-blue">
    <div class="custom-container dt:w-[75%] mb:w-[90%] mx-auto">
      <h1 class="text-5xl text-blue font-bold mb:text-center mb-12">Events</h1>
      <div class="flex mb-8 mb:mx-auto dt:justify-start justify-center">
        <div class="filter-buttons-container flex">
          <span class="mr-4 mt-2">Filter:</span>
          <div class="filter-buttons flex flex-wrap">
            {eventTypes.map(type => (
              <button class="filter-btn bg-blue text-white hover:text-white px-4 py-2 rounded-full mr-2 mb-2" data-type={type}>{type}</button>
            ))}
          </div>
        </div>
      </div>
      <div id="events-grid" class="grid mb:grid-cols-1 dt:grid-cols-3 gap-8 mx-auto">
        {sortedEvents.length > 0 ? (
          sortedEvents.map(event => (
            <a href={event.href} class="event-card bg-light-blue rounded-xl p-6 block transition-all duration-300" data-category={event.category} target="_blank" rel="noopener noreferrer">
              <div class="text-white transition-colors duration-300">
                <h2 class="text-2xl font-bold mb-2">
                  {new Date(event.eventDate).toLocaleDateString('default', { month: 'short', day: 'numeric' })}
                </h2>
                <p class="text-lg mb-2">{event.title}</p>
                <p class="text-lg">{event.category}</p>
              </div>
            </a>
          ))
        ) : (
          <p class="col-span-3 text-center text-xl">No upcoming events at this time. Check back later!</p>
        )}
      </div>
      <div class="flex justify-center mt-8">
        <button class="mr-4 font-bold text-4xl hover:scale-110">&lt;</button>
        <button class="font-bold text-4xl hover:scale-110">&gt;</button>
      </div>
    </div>
  </section>
</Layout>

<style>
  .filter-buttons button {
    transition: background-color 0.3s ease;
  }
  .filter-buttons button:hover {
    background-color: var(--light-blue);
    color: var(--white);
  }
  #events-grid {
    min-height: 600px;
  }
  .filter-btn.active {
    background-color: var(--blue);
    color: var(--white);
  }
  .filter-btn:not(.active) {
    background-color: var(--white);
    color: var(--blue);
    border: 1px solid var(--blue);
  }
  .event-card {
    transition: all 0.3s ease;
    height: 200px; /* Set a fixed height for all cards */
    display: flex;
    flex-direction: column;
  }
  .event-card:hover {
    background-color: white;
    border: 5px solid var(--light-blue);
  }
  .event-card:hover .text-white {
    color: var(--blue);
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const filterButtons = document.querySelectorAll('.filter-btn');
    const eventCards = document.querySelectorAll('.event-card');
  
    filterButtons.forEach(button => {
      button.addEventListener('click', () => {
        const filterType = button.getAttribute('data-type');
  
        // Toggle active class for buttons
        filterButtons.forEach(btn => btn.classList.remove('active'));
        button.classList.add('active');
  
        // Filter events
        eventCards.forEach(card => {
          if (card instanceof HTMLElement) {  // Type assertion
            if (filterType === 'All' || card.getAttribute('data-category') === filterType) {
              card.style.display = 'block';
            } else {
              card.style.display = 'none';
            }
          }
        });
      });
    });
  
    // Set 'All' as default active filter
    const allButton = document.querySelector('.filter-btn[data-type="All"]');
    if (allButton instanceof HTMLElement) {  // Type assertion
      allButton.classList.add('active');
    }
  });
  </script>
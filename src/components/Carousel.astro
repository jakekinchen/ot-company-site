---
// Carousel.astro
import type { Clients } from '../types';

interface Props {
  pauseOnHover?: boolean;
  clients: Clients[];
  scale?: number;
  speed?: number;
  scroll?: boolean;
  sideBlur?: boolean;
}

const { pauseOnHover = true, clients = [], scale = 1, speed = 35, scroll = false, sideBlur=true } = Astro.props;
---

<div class={`logos-wrapper ${sideBlur ? 'side-blur' : ''}`}>
  <div 
    class={`logos ${pauseOnHover ? 'pause-on-hover' : ''} ${scroll ? 'scrollable' : ''}`} 
    style={`--scale: ${scale}; --speed: ${speed}; --blur-color: rgba(200,200,200,0.8)`}
  >
    <div class="logos-slide">
      {clients.map((client) => (
        <a href={client.href} target="_blank" rel="noopener noreferrer" style={`--client-scale: ${client.scale};`}>
          <img src={client.iconSrc} alt={client.alt} title={client.label}  />
        </a>
      ))}
    </div>
  </div>
  <div class="blur-left"></div>
  <div class="blur-right"></div>
</div>

<script>
  const logosContainers = document.querySelectorAll('.logos.scrollable') as NodeListOf<HTMLElement>;
  logosContainers.forEach(container => {
    const slide = container.querySelector('.logos-slide') as HTMLElement;
    let isMouseOver = false;
    let animationFrame = 0;
    let lastScrollPosition = 0;
    let scrollDirection = 1;
    let scrollSpeed = 1;

    const cloneLogos = () => {
      const logos = slide.innerHTML;
      slide.innerHTML = logos.repeat(3);  // Just three sets of logos
    }

    const updateScroll = (timestamp: number) => {
      if (!isMouseOver) {
        container.scrollLeft += scrollSpeed * scrollDirection;
      } else {
        // Update scroll direction and speed based on manual scrolling
        const currentScrollPosition = container.scrollLeft;
        scrollDirection = currentScrollPosition > lastScrollPosition ? 1 : -1;
        scrollSpeed = Math.abs(currentScrollPosition - lastScrollPosition);
        lastScrollPosition = currentScrollPosition;
      }

      // Check if we need to reset the scroll position
      const oneSetWidth = slide.scrollWidth / 3;
      if (container.scrollLeft >= oneSetWidth * 2) {
        container.scrollLeft -= oneSetWidth;
      } else if (container.scrollLeft <= 0) {
        container.scrollLeft += oneSetWidth;
      }

        // Update side blur visibility
    const wrapper = container.closest('.logos-wrapper') as HTMLElement;
    const blurLeft = wrapper.querySelector('.blur-left') as HTMLElement;
    const blurRight = wrapper.querySelector('.blur-right') as HTMLElement;
    


      animationFrame = requestAnimationFrame(updateScroll);
    }

    const handleMouseOver = () => {
      isMouseOver = true;
      lastScrollPosition = container.scrollLeft;
    };

    const handleMouseOut = () => {
      isMouseOver = false;
      scrollSpeed = 1;
      scrollDirection = 1;
    };

    container.addEventListener('mouseenter', handleMouseOver);
    container.addEventListener('mouseleave', handleMouseOut);

    cloneLogos();
    animationFrame = requestAnimationFrame(updateScroll);
  });
</script>

<style>
  @keyframes slide {
    from {
      transform: translateX(0);
    }
    to {
      transform: translateX(-33.33%);
    }
  }

  .logos-wrapper {
    position: relative;
    overflow: hidden;
  }

  .logos {
    --base-height: 100px;
    --base-padding: 30px;
    --base-max-width: 180px;
    --base-max-height: 80px;
    overflow: hidden;
    padding: calc(20px * var(--scale)) 0;
    background: white;
    white-space: nowrap;
    position: relative;
    z-index: 1;
  }

  .logos-wrapper .blur-left,
  .logos-wrapper .blur-right {
    position: absolute;
    top: 0;
    width: calc(100px * var(--scale));
    height: 100%;
    z-index: 2;
    pointer-events: none;
    opacity: 1;
    backdrop-filter: blur(5px);
  }

  .logos-wrapper .blur-left {
    left: 0;
    background: linear-gradient(to right, var(--blur-color, rgba(255, 255, 255, 0.8)), rgba(255, 255, 255, 0));
  }

  .logos-wrapper .blur-right {
    right: 0;
    background: linear-gradient(to left, var(--blur-color, rgba(255, 255, 255, 0.8)), rgba(255, 255, 255, 0));
  }


  .logos-slide {
    display: inline-flex;
    animation: calc(var(--speed) * 1s) slide infinite linear;
  }

  .logos.pause-on-hover:hover .logos-slide {
    animation-play-state: paused;
  }

  .logos-slide a {
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 0 calc(var(--base-padding) * var(--scale) / var(--client-scale));
  height: calc(var(--base-height) * var(--scale));
}

.logos-slide img {
  border-radius: 0;
  max-width: calc(var(--base-max-width) * var(--scale) * var(--client-scale));
  max-height: calc(var(--base-max-height) * var(--scale) * var(--client-scale));
  width: auto;
  height: auto;
  object-fit: contain;
  transform: scale(var(--client-scale));
  transition: transform 0.3s ease;
}

.logos-slide img:hover {
  transform: scale(calc(var(--client-scale) * 1.1));
}

  .logos.scrollable {
    scrollbar-width: none; /* Firefox */
    -ms-overflow-style: none; /* Internet Explorer 10+ */
  }

  .logos.scrollable::-webkit-scrollbar {
    display: none; /* WebKit browsers (Safari, Chrome) */
  }

  .logos.scrollable:hover {
    overflow-x: scroll;
    -webkit-overflow-scrolling: touch;
  }

  .logos.scrollable:hover .logos-slide {
    animation-play-state: paused;
    display: flex;
    width: max-content;
  }


  @media (max-width: 960px) {
    .logos-slide a {
      padding: 0 calc(20px * var(--scale));
    }
    .logos-slide img {
      max-width: calc(120px * var(--scale));
      max-height: calc(60px * var(--scale));
    }
    
    .logos-wrapper .blur-left,
    .logos-wrapper .blur-right {
      width: calc(50px * var(--scale));
    }
  }
</style>
---
interface Props {
  mouseHoverAnimation: string;
  staticMouse?: boolean;
  repetitions?: number | null;
  size?: number;
}

const { mouseHoverAnimation, staticMouse = false, repetitions = null, size = 16 } = Astro.props;
---

{mouseHoverAnimation === "true" && (
  <img
    src="/mouse.svg"
    alt="Mouse cursor"
    class="absolute transition-all duration-500 ease-in-out"
    id="animated-mouse"
    style={`width: ${size}px; height: ${size}px; ${staticMouse || repetitions === 0 ? 'display: block; left: 50%; top: 50%; transform: translate(-50%, -50%);' : 'display: none;'}`}
  />
)}

<script is:inline define:vars={{ staticMouse, repetitions, size }}>
  const mouse = document.getElementById('animated-mouse');
  const container = document.getElementById('mockup-container');

  if (mouse && container && !staticMouse && repetitions !== 0) {
    const positions = [
      { x: '80%', y: '70%' }, // Bottom right (laptop)
      { x: '50%', y: '40%' }, // Center (desktop)
      { x: '20%', y: '70%' }, // Bottom left (tablet)
    ];

    let currentPosition = 0;
    let currentRepetition = 0;

    function animateMouse() {
      const { x, y } = positions[currentPosition];
      if (!mouse) {
        console.error('Mouse cursor image not found');
        return;
      }
      mouse.style.left = `calc(${x} - ${size / 2}px)`;
      mouse.style.top = `calc(${y} - ${size / 2}px)`;
      mouse.style.display = 'block';
      
      currentPosition = (currentPosition + 1) % positions.length;
      
      if (currentPosition === 0 && repetitions !== null) {
        currentRepetition++;
        if (currentRepetition >= repetitions) {
          clearInterval(animationInterval);
        }
      }
    }

    // Initial position
    animateMouse();

    // Animate every 2 seconds
    const animationInterval = setInterval(animateMouse, 2000);
  }
</script>
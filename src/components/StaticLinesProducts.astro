---
interface Props {
  id: string;
  path?: string;
  flipped?: boolean;
  xOffset?: number;
  yOffset?: number;
  circleRadius?: number;
  circleColor?: string;
  viewBox?: string;
  glowDistance?: number;
  animationDuration?: number;
  directIntoDiv?: 'left' | 'right' | null;
  initialYOffset?: number;
  verticalSegmentXOffset?: number;
  divEndX?: 'beginning' | 'center' | 'end';
  divEndY?: 'top' | 'center' | 'bottom';
  strokeWidth?: number;
  strokeDashArray?: number;
  strokeDashOffset?: number;
}

const { 
  id, 
  path, 
  flipped = false, 
  xOffset = 0, 
  yOffset = 0, 
  circleRadius = 15, 
  circleColor = 'cold-white', 
  viewBox = '0 0 100 100', 
  glowDistance = 36,
  animationDuration = 20,
  directIntoDiv = null,
  initialYOffset = 0,
  verticalSegmentXOffset = null,
  divEndX = 'beginning',
  divEndY = 'center',
  strokeWidth = 12,
  strokeDashArray = 20,
  strokeDashOffset = 21,
} = Astro.props;

const adjustedXOffset = flipped ? -xOffset : xOffset;

---

<div
  id={`${id}-container`}
  class={`z-50 line-container ${flipped ? 'flipped' : ''} ${directIntoDiv ? `direct-into-div-${directIntoDiv}` : ''}`}
  style={`transform: translate(${adjustedXOffset}px, ${yOffset}px) ${flipped ? 'scaleX(-1)' : ''};`}
>
<svg class="line-svg" xmlns="http://www.w3.org/2000/svg" viewBox={viewBox} preserveAspectRatio="xMidYMid" overflow="visible">
    <defs>
      <filter id={`glow-${id}`} x="-50%" y="-50%" width="200%" height="200%">
        <feGaussianBlur stdDeviation={glowDistance} result="coloredBlur"/>
        <feMerge>
          <feMergeNode in="coloredBlur"/>
          <feMergeNode in="SourceGraphic"/>
        </feMerge>
      </filter>
    </defs>
    <path 
      class="line-path" 
      d={path} 
      id={`${id}-path`}
      stroke="white"
      stroke-width={strokeWidth}
      stroke-dasharray={strokeDashArray}
      stroke-dashoffset={strokeDashOffset}
      vector-effect="non-scaling-stroke"
    />
    <circle 
      class="glowing-circle" 
      cx="0" 
      cy="0" 
      r={circleRadius} 
      fill="white"
      filter={`url(#glow-${id})`}
    >
      <animateMotion repeatCount="indefinite" dur={`${animationDuration}s`}>
        <mpath href={`#${id}-path`}/>
      </animateMotion>
    </circle>
  </svg>
</div>

<style>
  .line-container {
    position: absolute;
    width: 12vw;
  }
  .line-container.flipped {
    right: 0;
  }
  .line-container:not(.flipped) {
    left: 0;
  }
  .direct-into-div-left, .direct-into-div-right {
    width: 100%;
    height: 100%;
  }
  .line-svg {
    width: 100%;
    height: auto;
  }
  .line-path {
    fill: none;
    stroke: rgba(255, 255, 255, 1);
    vector-effect: non-scaling-stroke;
    stroke-dasharray: 20;
    stroke-dashoffset: 21;
    animation: dash 20s linear infinite;
  }
  @keyframes dash {
    from {
      stroke-dashoffset: 0;
    }
    to {
      stroke-dashoffset: 20;
    }
  }
</style>



<script is:inline define:vars={{ id, directIntoDiv, initialYOffset, verticalSegmentXOffset, divEndX, divEndY }}>
  function updatePath() {
    if (!directIntoDiv) return;

    const container = document.querySelector(`#${id}-container`);
    const svg = container.querySelector('.line-svg');
    const path = svg.querySelector('.line-path');
    const targetDiv = container.closest('.product-snippet'); // Adjust this selector as needed

    if (!targetDiv) return;

    const targetRect = targetDiv.getBoundingClientRect();
    const containerRect = container.getBoundingClientRect();

    const startX = directIntoDiv === 'left' ? 0 : window.innerWidth;
    let endX;
    switch (divEndX) {
      case 'beginning':
        endX = directIntoDiv === 'left' ? targetRect.left : targetRect.right;
        break;
      case 'center':
        endX = (targetRect.left + targetRect.right) / 2;
        break;
      case 'end':
        endX = directIntoDiv === 'left' ? targetRect.right : targetRect.left;
        break;
    }



    const middleX = verticalSegmentXOffset !== null 
      ? (directIntoDiv === 'left' ? startX + verticalSegmentXOffset : endX - verticalSegmentXOffset)
      : (startX + endX) / 2;
    
    const startY = containerRect.top + initialYOffset;
    let endY;
    switch (divEndY) {
      case 'top':
        endY = targetRect.top;
        break;
      case 'center':
        endY = (targetRect.top + targetRect.bottom) / 2;
        break;
      case 'bottom':
        endY = targetRect.bottom;
        break;
    }

    const newPath = `M ${startX} ${startY} 
                     H ${middleX} 
                     V ${endY} 
                     H ${endX}`;
    
    path.setAttribute('d', newPath);

    // Update viewBox to encompass the entire path
    const minX = Math.min(startX, endX);
    const maxX = Math.max(startX, endX);
    const minY = Math.min(startY, endY);
    const maxY = Math.max(startY, endY);
    svg.setAttribute('viewBox', `${minX} ${minY} ${maxX - minX} ${maxY - minY}`);
  }

  window.addEventListener('updateLine', () => {
      updatePath();
    });

  function updateSVGSize() {
    const container = document.querySelector(`#${id}-container`);
    const svg = container.querySelector('.line-svg');
    if (svg && container) {
      svg.setAttribute('width', container.offsetWidth.toString());
      svg.setAttribute('height', container.offsetHeight.toString());
    }
  }

  window.addEventListener('resize', () => {
    updateSVGSize();
    updatePath();
  });
  
  document.addEventListener('DOMContentLoaded', () => {
    updateSVGSize();
    setTimeout(updatePath, 0);
  });
</script>

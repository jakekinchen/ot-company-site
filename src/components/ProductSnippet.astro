---
const {
  iconSrc = "/productIcons/Risk Engagement.svg",
  productName = "Risk Engagement",
  title = "Respond swiftly and decisively",
  subtitle = "Assess and address your cyber risk head on. Become compliant in your choice of frameworks that align with business objectives.",
  url = "/products/risk-engagement",
  justify = "left", // Default justification
  outerClass = "", // Additional classes for outer div
  containerClass = "", // Additional classes for container
  textClass = "", // Additional classes for text elements
  iconClass = "", // Additional classes for large icon
  firstLine = null,
  firstSnippet = false,
} = Astro.props;

const isLeft = justify === "left";
const containerClasses = isLeft ? `dt:items-start ${containerClass}` : `dt:items-end ${containerClass}`;
const justifyClass = isLeft ? "dt:justify-start" : "dt:justify-end";
const textAlignClass = isLeft ? `dt:text-left ${textClass}` : `dt:text-right ${textClass}`;
const orderClasses = isLeft ? "dt:order-1" : "dt:order-2";
const iconOrderClasses = isLeft ? "dt:order-2" : "dt:order-1";
const marginClasses = isLeft ? `dt:ml-40 ${iconClass}` : `dt:mr-24 ${iconClass}`;
const productId = productName.toLowerCase().replace(/ /g, '-');
import Lines from './StaticLines.astro';
import DottedPathSVG from './DottedPathSVG.astro';


---

<div class="mb:hidden w-screen left-1/2 right-1/2 -mx-[50vw]">
  { /* in the Lines component here we would like to set the x-coordinate of the beginning of the instantiated {productId} outer-container if isLeft=true but the end of the containers x-coordinate if false and pass that in as */ }
  <DottedPathSVG
  uniqueId={`${productId}-line`}
  targetDivClass={`${productId}-title`}
  strokeWidth={4}
  strokeDasharray="5,5"
  circleRadius={10}
  animationDuration={10}
  glowDistance={2.5}
  initialYOffset={0}
  startY={0}
  strokeColor="white"
  circleColor="white"
  glowColor={null}
  targetDivXPosition="right"
  targetDivYPosition="top"
  semiRect={false}
  flipped={!isLeft}
  endYOffset={0}
  startYDivClass = {`${productId}-container`},
  followDivBorder = {true},
  followDivBorderDirection = 'top',
  startYDivPosition = 'center',
  followDivBorderOffset = {25},
  loopReverse={true}

/>
</div>
<div id={`${productId}-container`} class={`${productId}-container text-white flex justify-center mb:border-b-4 mb:pb-12 mb:flex-col items-center mb:max-w-[700px] mb:w-[90vw] mb:mb-8`}>
  <div class="connector-line hidden" style={`height: ${firstSnippet ? '4rem' : '2rem'}; top: ${firstSnippet ? '-4.2rem' : '-2.4rem'};`} />
  
  <div class={`flex flex-col mb:px-4 w-[55%] mb:w-full mb:flex-col mb:items-center ${containerClasses} ${orderClasses}`}>
    
    <div class={`${productId}-title flex mb:flex-col mb:text-center mb:justify-center items-center`}>
      <img src={iconSrc} alt={`${productName} Icon`} class={`w-[2vw] mr-[1vw] rounded-none mb:w-[25vw] mb:order-2 filter filter-white`}>
      <h1 class={`${textClass}`}>{productName}</h1>
    </div>
    <h2 class={` ${textAlignClass}`}>{title}</h2>
    <p class={`text-2xl mb-6 text-white w-[70%] text-center ${textAlignClass}`}>{subtitle}</p>
    <a href={url} class="gradient-button text-center px-8 py-2 text-xl leading-v-relaxed">
      More Information
    </a>
  </div>
  <div class={`outer-container relative w-[20%] mb:transform mb:-translate-x-full mb:w-[.2vw] mb:hidden mb:absolute  ${marginClasses} ${iconOrderClasses}`}>
    <img id={`${productId}-icon`} src={iconSrc} alt={`${productName} Icon`} class={`filter filter-white`}>
  </div>
</div>
<style>
  @keyframes dash {
  to {
    stroke-dashoffset: 1000;
  }
}

  h1 {
  font-size: calc(1vw + 1rem);
  font-weight: 600; /* semibold */
  color: white;
}

@media (max-width: 960px) {
  h1 {
    font-size: clamp(2rem, 2vw + 1rem, 6rem);
    margin-bottom: 1rem;
  }
}

  h2 {
  font-size: calc(3vw + 2rem);
  font-weight: bold;
  margin-bottom: 1.5rem;
  color: white;
  }

@media (max-width: 960px) {
  h2 {
    font-size: clamp(1.5rem, 2vw + 1rem, 4rem);
    margin-top: 1.5rem;
    text-align: center;
  }
}

  .connector-line {
    position: relative;
    width: 4px;
    height: 2rem;
    top: -2.4rem;
    background: linear-gradient(to bottom, transparent 50%, rgb(255, 255, 255) 50%);
    background-size: 100% 16px;
    animation: dash 5s linear infinite;
    background-repeat: repeat-y; /* Ensure the gradient repeats */
  }


  

  a:hover {
    color: white;
  }

  @media (min-width: 960px) {
    .connector-line {
      display: none;
    }
  }
</style>